@page "/servers"
@using MUnique.OpenMU.Interfaces
@using System.ComponentModel

@implements IDisposable;

<PageTitle>OpenMU: Servidores</PageTitle>
<Breadcrumb IsFirstFromRoot="true" Caption="Servidores"/>
<h1>Servidores</h1>

@if (_servers == null)
{
    <p><em>Cargando...</em></p>
}
else
{
<div>
  <table>
    <thead>
    <tr>
      <th></th>
      <th class="col-sm-7">Nombre del Servidor</th>
      <th class="col-sm-1">Jugadores</th>
      <th class="col-sm-2">Estado Actual</th>
      <th class="col-sm-2">Acción</th>
    </tr>
    </thead>
    <tfoot>
    <TotalOnlineCounter Servers=@_servers />
    </tfoot>
    <tbody>
    @foreach (var server in this._servers.OrderBy(s => s.Type).ThenBy(s => s.Description))
    {
      <ServerItem Server=@server/>
    }
    
    <tr>
      <td></td>
      <td>
        <NavLink class="btn btn-primary" href="create-game-server">
          <span class="oi oi-plus"></span> Servidor de Juego
        </NavLink>
        <NavLink class="btn btn-primary" href="create-connect-server">
            <span class="oi oi-plus"></span> Servidor de Conexión
        </NavLink>
      </td>
      <td></td>
      <td></td>
      <td>
        @if (this.ServerInstanceManager is not null)
        {
          @if (this._isRestarting)
          {
            <button type="button" class="btn-warning" disabled="disabled">
              <div class="spinner-border text-secondary" role="status">
              </div>
            </button>
          }
          else
          {
            <button type="button" class="btn-warning" @onclick="this.OnReloadAndRestartClickAsync">
              <span class="oi oi-reload"></span>
              Recargar configuración y reiniciar todos los Servidores de Juego
            </button>
          }
        }
      </td>
    </tr>
    </tbody>
  </table>
</div>
}

@code {
    private IList<IManageableServer>? _servers;

    private bool _isRestarting;

    /// <summary>
    /// Gets or sets the <see cref="IServerProvider"/>.
    /// </summary>
    [Inject]
    public IServerProvider ServerProvider { get; set; } = null!;

    /// <summary>
    /// Gets or sets the <see cref="IGameServerInstanceManager"/>.
    /// </summary>
    [Inject]
    public IGameServerInstanceManager? ServerInstanceManager { get; set; }

    /// <inheritdoc />
    public void Dispose()
    {
        this.ServerProvider.PropertyChanged -= this.OnServersChanged;
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        this._servers = this.ServerProvider.Servers;
        this.ServerProvider.PropertyChanged += this.OnServersChanged;
    }

    private void OnServersChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(IServerProvider.Servers))
        {
            this._servers = this.ServerProvider.Servers;
            this.InvokeAsync(this.StateHasChanged);
        }
    }

    private async Task OnReloadAndRestartClickAsync()
    {
      this._isRestarting = true;
      try
      {
            await this.ServerInstanceManager!.RestartAllAsync(false);
      }
      finally
      {
        this._isRestarting = false;
      }
    }
}
