@page "/gameServer/{gameServerId:int}/map/{mapId:guid}"
@implements IDisposable

@using MUnique.OpenMU.Web.Map.Components
@using MUnique.OpenMU.Web.Map
@using MUnique.OpenMU.Interfaces
@using MUnique.OpenMU.GameLogic

<PageTitle>OpenMU: Mapa en Vivo</PageTitle>
<Breadcrumb Caption="Mapa en Vivo"/>

@if (this._gameServer is not null)
{
    <div>
        <NavLink href="" Match="NavLinkMatch.All">
            <span>Todos</span>
        </NavLink>
        <span> / @this._map?.MapName</span>
    </div>

    <CascadingValue Value="@_gameServer">
        <Map Server="@_gameServer" MapId="@MapId"></Map>
    </CascadingValue>
}

@code {
    internal const string LiveMapRoute = "map/";

    private IGameMapInfo? _map;

    private IObservableGameServer? _gameServer;

    /// <summary>
    /// Gets or sets the server id on which the map is hosted.
    /// </summary>
    [Inject]
    public IList<IManageableServer> Servers { get; set; } = null!;

    /// <summary>
    /// Gets or sets the map id.
    /// </summary>
    [Parameter]
    public Guid MapId { get; set; }

    /// <summary>
    /// Gets or sets the game server id/index.
    /// </summary>
    [Parameter]
    public int GameServerId { get; set; }

    /// <inheritdoc />
    public void Dispose()
    {
        (this._gameServer as IDisposable)?.Dispose();
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        var gameServer = this.Servers.OfType<IGameServer>().First(gs => gs.Id == this.GameServerId);
        var context = (gameServer as IGameServerContextProvider)?.Context ?? throw new InvalidOperationException("This map page just works in a All-In-One deployment.");
        var adapter = new ObservableGameServerAdapter(context);
        await adapter.InitializeAsync();

        this._gameServer = adapter;
        this._map = this._gameServer.Maps.First(m => m.Id == this.MapId);
        await base.OnInitializedAsync();
    }
}
