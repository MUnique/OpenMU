@using MUnique.OpenMU.DataModel.Configuration
@using MUnique.OpenMU.Persistence
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png

@if (this._selectedMap is null)
{
    return;
}

<h3>@this.SelectedMap.Name</h3>

<div class="map-select">
    <label for="mapSelect">Selected Map:</label>
    <select title="Map" @onchange=this.OnMapSelectedAsync id="mapSelect" autocomplete="off">
        @foreach (var map in this.Maps ?? Enumerable.Empty<GameMapDefinition>())
        {
            <option value="@map.GetId()" selected=@(object.Equals(this.SelectedMap, map))>Map: @map.ToString()</option>
        }
    </select>
</div>

<div class="btn-toolbar my-2" role="toolbar" aria-label="Toolbar">
    <div class="btn-group mr-2" role="group" aria-label="Creation Group">
        <button type="button" class="btn btn-secondary" @onclick="@this.CreateNewSpawnArea" disabled="@this._createMode">
            <span class="oi oi-plus"></span> Spawn Area
        </button>
        <button type="button" class="btn btn-secondary" @onclick="@this.CreateNewEnterGate" disabled="@this._createMode">
            <span class="oi oi-plus"></span> Enter Gate
        </button>
        <button type="button" class="btn btn-secondary" @onclick="@this.CreateNewExitGate" disabled="@this._createMode">
            <span class="oi oi-plus"></span> Exit Gate
        </button>
    </div>
    <div class="btn-group" role="group" aria-label="Control Group">
        @if (this._createMode)
        {
            <button id="applyCreate" type="button" class="btn btn-primary" @onclick="@(_ => this._createMode = false)"><span class="oi oi-circle-check"></span></button>
            <button id="cancelCreate" type="button" class="btn btn-secondary" @onclick="@this.CancelCreationAsync"><span class="oi oi-circle-x"></span></button>
        }
        else if (this._focusedObject is not null)
        {
            <button id="removeFocused" type="button" class="btn btn-secondary" @onclick="@this.RemoveFocusedObjectAsync"><span class="oi oi-x"></span> Remove</button>
        }
    </div>
</div>

@if (this._terrainImage is { })
{
    <div class="map-host" width="@(_scale * 255)" height="@(_scale * 255)" @onmousemove="@this.OnMouseMoveAsync" @onmouseup="() => _resizerPosition = null">
        <img src="@(this._terrainImage.ToBase64String(PngFormat.Instance))"
             width="@(_scale * 255)"
             height="@(_scale * 255)"
             alt="Terrain of @this.SelectedMap.Name"/>
        @foreach (var obj in this.GetMapObjects())
        {
            <div class="@this.GetCssClass(obj)"
                 title="@obj.ToString()"
                 style="@this.GetSizeAndPositionStyle(obj)"
                 @onclick="@(_ => { if (!this._createMode) { this._focusedObject = obj; } })">
                @if (this.ShowResizers(obj))
                {
                    <Resizers Resizing="@this.OnStartResizing"/>
                }
                else if (this.ShowArrow(obj, out var spawn))
                {
                    <div class="arrow @this.GetFocusedRotation()"></div>
                }
                else
                {
                    // show nothing
                }
            </div>
        }
    </div>
}

@if (!this._createMode)
{
    <div class="map-object-select">
        <label for="objectSelect">Selected Object:</label>
        <select title="Object" @onchange=this.OnObjectSelected id="objectSelect" autocomplete="off" disabled="@this._createMode">
            <option value="@Guid.Empty" selected=@(this._focusedObject is null)></option>
            @foreach (var enterGate in this.SelectedMap.EnterGates)
            {
                <option value="@enterGate.GetId()" selected=@(object.Equals(this._focusedObject, enterGate))>EnterGate: @enterGate.ToString()</option>
            }
            @foreach (var exitGate in this.SelectedMap.ExitGates)
            {
                <option value="@exitGate.GetId()" selected=@(object.Equals(this._focusedObject, exitGate))>ExitGate: @exitGate.ToString()</option>
            }
            @foreach (var spawn in this.SelectedMap.MonsterSpawns)
            {
                <option value="@spawn.GetId()" selected=@(object.Equals(this._focusedObject, spawn))>Spawn: @spawn.ToString()</option>
            }
        </select>
    </div>
}

@if (this._focusedObject != null)
{
    <div class="map-object-form">
        @if (_focusedObject is EnterGate enterGate)
        {
            <AutoForm Model="@enterGate" OnValidSubmit="@this.OnValidSubmit"></AutoForm>
        }
        else if (_focusedObject is ExitGate exitGate)
        {
            <AutoForm Model="@exitGate" OnValidSubmit="@this.OnValidSubmit"></AutoForm>
        }
        else if (_focusedObject is MonsterSpawnArea spawn)
        {
            <AutoForm Model="@spawn" OnValidSubmit="@this.OnValidSubmit"></AutoForm>
        }
    </div>
}
