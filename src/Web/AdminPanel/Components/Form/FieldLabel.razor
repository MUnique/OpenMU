@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using System.Reflection
@typeparam TValue

@if (!string.IsNullOrWhiteSpace(this._actualLabel))
{
    <label for="@this._fieldIdentifier.FieldName">
        @this._actualLabel
        @if (!string.IsNullOrWhiteSpace(this._description))
        {
            <details>
                <summary></summary>
                <div><span class="oi oi-info" aria-hidden="true"></span> @this._description</div>
            </details>
        }
    </label>
}

@code {
    private string _actualLabel = null!;
    private FieldIdentifier _fieldIdentifier;
    private string? _description;

    /// <summary>
    /// Gets or sets the text.
    /// </summary>
    [Parameter]
    public string? Text { get; set; }

    /// <summary>
    /// Gets or sets an expression that identifies the bound value.
    /// </summary>
    [Parameter]
    public Expression<Func<TValue>> ValueExpression { get; set; } = null!;

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this._fieldIdentifier = FieldIdentifier.Create(this.ValueExpression);
        var property = this._fieldIdentifier.Model.GetType().GetProperty(this._fieldIdentifier.FieldName);
        var displayAttribute = property?.GetCustomAttribute<DisplayAttribute>();
        this._actualLabel = (string.IsNullOrWhiteSpace(this.Text) ? null : this.Text)
                            ?? displayAttribute?.GetName()
                            ?? CaptionHelper.SeparateWords(this._fieldIdentifier.FieldName);
        this._description = displayAttribute?.GetDescription();
    }
}
