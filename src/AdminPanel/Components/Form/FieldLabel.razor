@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using System.Reflection
@typeparam TValue

<label for="@this._fieldIdentifier.FieldName">@this._actualLabel</label>

@code {
    private string _actualLabel = null!;
    private FieldIdentifier _fieldIdentifier;

    /// <summary>
    /// Gets or sets the text.
    /// </summary>
    [Parameter]
    public string? Text { get; set; }

    /// <summary>
    /// Gets or sets an expression that identifies the bound value.
    /// </summary>
    [Parameter]
    public Expression<Func<TValue>> ValueExpression { get; set; } = null!;

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this._fieldIdentifier = FieldIdentifier.Create(this.ValueExpression);
        this._actualLabel = (string.IsNullOrWhiteSpace(this.Text) ? null : this.Text)
                           ?? this._fieldIdentifier.Model.GetType().GetProperty(this._fieldIdentifier.FieldName)?.GetCustomAttribute<DisplayAttribute>()?.Name
                           ?? this._fieldIdentifier.FieldName;
    }
}
