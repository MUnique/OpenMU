// <copyright file="GameConfiguration.Generated.cs" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This source code was auto-generated by a roslyn code generator.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

namespace MUnique.OpenMU.Persistence.BasicModel;

using MUnique.OpenMU.Persistence.Json;

/// <summary>
/// A plain implementation of <see cref="GameConfiguration"/>.
/// </summary>
public partial class GameConfiguration : MUnique.OpenMU.DataModel.Configuration.GameConfiguration, IIdentifiable, IConvertibleTo<GameConfiguration>
{
    
    /// <summary>
    /// Gets or sets the identifier of this instance.
    /// </summary>
    public Guid Id { get; set; }
    
    /// <summary>
    /// Gets the raw collection of <see cref="JewelMixes" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("jewelMixes")]
    public ICollection<JewelMix> RawJewelMixes { get; } = new List<JewelMix>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.JewelMix> JewelMixes
    {
        get => base.JewelMixes ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.JewelMix, JewelMix>(this.RawJewelMixes);
        protected set
        {
            this.JewelMixes.Clear();
            foreach (var item in value)
            {
                this.JewelMixes.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="WarpList" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("warpList")]
    public ICollection<WarpInfo> RawWarpList { get; } = new List<WarpInfo>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.WarpInfo> WarpList
    {
        get => base.WarpList ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.WarpInfo, WarpInfo>(this.RawWarpList);
        protected set
        {
            this.WarpList.Clear();
            foreach (var item in value)
            {
                this.WarpList.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="DropItemGroups" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("dropItemGroups")]
    public ICollection<DropItemGroup> RawDropItemGroups { get; } = new List<DropItemGroup>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.DropItemGroup> DropItemGroups
    {
        get => base.DropItemGroups ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.DropItemGroup, DropItemGroup>(this.RawDropItemGroups);
        protected set
        {
            this.DropItemGroups.Clear();
            foreach (var item in value)
            {
                this.DropItemGroups.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="Skills" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("skills")]
    public ICollection<Skill> RawSkills { get; } = new List<Skill>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Skill> Skills
    {
        get => base.Skills ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Skill, Skill>(this.RawSkills);
        protected set
        {
            this.Skills.Clear();
            foreach (var item in value)
            {
                this.Skills.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="CharacterClasses" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("characterClasses")]
    public ICollection<CharacterClass> RawCharacterClasses { get; } = new List<CharacterClass>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.CharacterClass> CharacterClasses
    {
        get => base.CharacterClasses ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.CharacterClass, CharacterClass>(this.RawCharacterClasses);
        protected set
        {
            this.CharacterClasses.Clear();
            foreach (var item in value)
            {
                this.CharacterClasses.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="Items" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("items")]
    public ICollection<ItemDefinition> RawItems { get; } = new List<ItemDefinition>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemDefinition> Items
    {
        get => base.Items ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemDefinition, ItemDefinition>(this.RawItems);
        protected set
        {
            this.Items.Clear();
            foreach (var item in value)
            {
                this.Items.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="ItemLevelBonusTables" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("itemLevelBonusTables")]
    public ICollection<ItemLevelBonusTable> RawItemLevelBonusTables { get; } = new List<ItemLevelBonusTable>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemLevelBonusTable> ItemLevelBonusTables
    {
        get => base.ItemLevelBonusTables ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemLevelBonusTable, ItemLevelBonusTable>(this.RawItemLevelBonusTables);
        protected set
        {
            this.ItemLevelBonusTables.Clear();
            foreach (var item in value)
            {
                this.ItemLevelBonusTables.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="ItemSlotTypes" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("itemSlotTypes")]
    public ICollection<ItemSlotType> RawItemSlotTypes { get; } = new List<ItemSlotType>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemSlotType> ItemSlotTypes
    {
        get => base.ItemSlotTypes ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemSlotType, ItemSlotType>(this.RawItemSlotTypes);
        protected set
        {
            this.ItemSlotTypes.Clear();
            foreach (var item in value)
            {
                this.ItemSlotTypes.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="ItemOptions" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("itemOptions")]
    public ICollection<ItemOptionDefinition> RawItemOptions { get; } = new List<ItemOptionDefinition>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionDefinition> ItemOptions
    {
        get => base.ItemOptions ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionDefinition, ItemOptionDefinition>(this.RawItemOptions);
        protected set
        {
            this.ItemOptions.Clear();
            foreach (var item in value)
            {
                this.ItemOptions.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="ItemOptionTypes" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("itemOptionTypes")]
    public ICollection<ItemOptionType> RawItemOptionTypes { get; } = new List<ItemOptionType>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionType> ItemOptionTypes
    {
        get => base.ItemOptionTypes ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionType, ItemOptionType>(this.RawItemOptionTypes);
        protected set
        {
            this.ItemOptionTypes.Clear();
            foreach (var item in value)
            {
                this.ItemOptionTypes.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="ItemSetGroups" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("itemSetGroups")]
    public ICollection<ItemSetGroup> RawItemSetGroups { get; } = new List<ItemSetGroup>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemSetGroup> ItemSetGroups
    {
        get => base.ItemSetGroups ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemSetGroup, ItemSetGroup>(this.RawItemSetGroups);
        protected set
        {
            this.ItemSetGroups.Clear();
            foreach (var item in value)
            {
                this.ItemSetGroups.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="ItemOptionCombinationBonuses" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("itemOptionCombinationBonuses")]
    public ICollection<ItemOptionCombinationBonus> RawItemOptionCombinationBonuses { get; } = new List<ItemOptionCombinationBonus>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionCombinationBonus> ItemOptionCombinationBonuses
    {
        get => base.ItemOptionCombinationBonuses ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionCombinationBonus, ItemOptionCombinationBonus>(this.RawItemOptionCombinationBonuses);
        protected set
        {
            this.ItemOptionCombinationBonuses.Clear();
            foreach (var item in value)
            {
                this.ItemOptionCombinationBonuses.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="Maps" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("maps")]
    public ICollection<GameMapDefinition> RawMaps { get; } = new List<GameMapDefinition>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.GameMapDefinition> Maps
    {
        get => base.Maps ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.GameMapDefinition, GameMapDefinition>(this.RawMaps);
        protected set
        {
            this.Maps.Clear();
            foreach (var item in value)
            {
                this.Maps.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="Monsters" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("monsters")]
    public ICollection<MonsterDefinition> RawMonsters { get; } = new List<MonsterDefinition>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.MonsterDefinition> Monsters
    {
        get => base.Monsters ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.MonsterDefinition, MonsterDefinition>(this.RawMonsters);
        protected set
        {
            this.Monsters.Clear();
            foreach (var item in value)
            {
                this.Monsters.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="Attributes" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("attributes")]
    public ICollection<AttributeDefinition> RawAttributes { get; } = new List<AttributeDefinition>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.AttributeSystem.AttributeDefinition> Attributes
    {
        get => base.Attributes ??= new CollectionAdapter<MUnique.OpenMU.AttributeSystem.AttributeDefinition, AttributeDefinition>(this.RawAttributes);
        protected set
        {
            this.Attributes.Clear();
            foreach (var item in value)
            {
                this.Attributes.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="MagicEffects" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("magicEffects")]
    public ICollection<MagicEffectDefinition> RawMagicEffects { get; } = new List<MagicEffectDefinition>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.MagicEffectDefinition> MagicEffects
    {
        get => base.MagicEffects ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.MagicEffectDefinition, MagicEffectDefinition>(this.RawMagicEffects);
        protected set
        {
            this.MagicEffects.Clear();
            foreach (var item in value)
            {
                this.MagicEffects.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="MasterSkillRoots" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("masterSkillRoots")]
    public ICollection<MasterSkillRoot> RawMasterSkillRoots { get; } = new List<MasterSkillRoot>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.MasterSkillRoot> MasterSkillRoots
    {
        get => base.MasterSkillRoots ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.MasterSkillRoot, MasterSkillRoot>(this.RawMasterSkillRoots);
        protected set
        {
            this.MasterSkillRoots.Clear();
            foreach (var item in value)
            {
                this.MasterSkillRoots.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="PlugInConfigurations" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("plugInConfigurations")]
    public ICollection<PlugInConfiguration> RawPlugInConfigurations { get; } = new List<PlugInConfiguration>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.PlugIns.PlugInConfiguration> PlugInConfigurations
    {
        get => base.PlugInConfigurations ??= new CollectionAdapter<MUnique.OpenMU.PlugIns.PlugInConfiguration, PlugInConfiguration>(this.RawPlugInConfigurations);
        protected set
        {
            this.PlugInConfigurations.Clear();
            foreach (var item in value)
            {
                this.PlugInConfigurations.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="MiniGameDefinitions" />.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("miniGameDefinitions")]
    public ICollection<MiniGameDefinition> RawMiniGameDefinitions { get; } = new List<MiniGameDefinition>();
    
    /// <inheritdoc/>
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.MiniGameDefinition> MiniGameDefinitions
    {
        get => base.MiniGameDefinitions ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.MiniGameDefinition, MiniGameDefinition>(this.RawMiniGameDefinitions);
        protected set
        {
            this.MiniGameDefinitions.Clear();
            foreach (var item in value)
            {
                this.MiniGameDefinitions.Add(item);
            }
        }
    }


    /// <inheritdoc/>
    public override bool Equals(object obj)
    {
        var baseObject = obj as IIdentifiable;
        if (baseObject != null)
        {
            return baseObject.Id == this.Id;
        }

        return base.Equals(obj);
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return this.Id.GetHashCode();
    }

    /// <inheritdoc/>
    public GameConfiguration Convert() => this;
}
