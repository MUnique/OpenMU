<# 
// <copyright file="Common.ttinclude" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>
#><#+
    private static readonly string ConfigurationNamespace = "MUnique.OpenMU.DataModel.Configuration";

    /// The standalone types which should not contain additional foreign key, because they were used somewhere in collections (except at GameConfiguration).
    /// For these types, join entity classes will be created and ManyToManyCollectionAdapter{T,TJoin} are used adapt between these types and the join entities.
    private string[] standaloneTypes = new string[]
    {
        "MUnique.OpenMU.DataModel.Configuration.CharacterClass",
        "MUnique.OpenMU.DataModel.Configuration.DropItemGroup",
        "MUnique.OpenMU.DataModel.Configuration.Items.ItemDefinition",
        "MUnique.OpenMU.DataModel.Configuration.Items.ItemOption",
        "MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionType",
        "MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionDefinition",
        "MUnique.OpenMU.DataModel.Configuration.Items.ItemSetGroup",
        "MUnique.OpenMU.DataModel.Configuration.MasterSkillDefinition",
        "MUnique.OpenMU.DataModel.Configuration.Skill",
        "MUnique.OpenMU.DataModel.Configuration.GameMapDefinition",
    };

    private List<Type> GetCustomTypes()
    {			
	    var customTypes = new List<Type>();

        AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += (s, args) => 
        {
            if (args.Name.StartsWith("System"))
            {
                return Assembly.ReflectionOnlyLoad(AppDomain.CurrentDomain.ApplyPolicy(args.Name));
            }

            if (args.Name.StartsWith("netstandard"))
            {
                return Assembly.ReflectionOnlyLoadFrom(@"C:\Program Files\dotnet\sdk\3.0.100\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\netstandard.dll");
            }

            var fileName = args.Name.Split(',')[0] + ".dll";
            return Assembly.ReflectionOnlyLoadFrom(this.Host.ResolvePath(@"..\..\..\bin\Debug\"+fileName));
        };
    
        Assembly assembly = Assembly.ReflectionOnlyLoadFrom(this.Host.ResolvePath(@"..\..\..\bin\Debug\MUnique.OpenMU.DataModel.dll"));		
        var loadedTypes = assembly.GetTypes().Where(type => type.IsClass && type.IsPublic && !type.IsSealed && !type.IsAbstract && type.GetConstructor(System.Array.Empty<System.Type>()) != null).ToList();
        customTypes.AddRange(loadedTypes);
        Assembly attributeSystemAssembly = Assembly.ReflectionOnlyLoadFrom(this.Host.ResolvePath(@"..\..\..\bin\Debug\MUnique.OpenMU.AttributeSystem.dll"));		
        customTypes.Add(attributeSystemAssembly.GetTypes().First(t => t.FullName == "MUnique.OpenMU.AttributeSystem.AttributeDefinition"));
        customTypes.Add(attributeSystemAssembly.GetTypes().First(t => t.FullName == "MUnique.OpenMU.AttributeSystem.StatAttribute"));
        customTypes.Add(attributeSystemAssembly.GetTypes().First(t => t.FullName == "MUnique.OpenMU.AttributeSystem.ConstValueAttribute"));
        customTypes.Add(attributeSystemAssembly.GetTypes().First(t => t.FullName == "MUnique.OpenMU.AttributeSystem.AttributeRelationship"));

        Assembly interfacesAssembly = Assembly.ReflectionOnlyLoadFrom(this.Host.ResolvePath(@"..\..\..\bin\Debug\MUnique.OpenMU.Interfaces.dll"));		
        customTypes.Add(interfacesAssembly.GetTypes().First(t => t.FullName == "MUnique.OpenMU.Interfaces.LetterHeader"));
        customTypes.Add(interfacesAssembly.GetTypes().First(t => t.FullName == "MUnique.OpenMU.Interfaces.Friend"));
        Assembly pluginsAssembly = Assembly.ReflectionOnlyLoadFrom(this.Host.ResolvePath(@"..\..\..\bin\Debug\MUnique.OpenMU.PlugIns.dll"));		
        customTypes.Add(pluginsAssembly.GetTypes().First(t => t.FullName == "MUnique.OpenMU.PlugIns.PlugInConfiguration"));

        return customTypes;
    }	

    /// <summary>
    /// Determines whether the given type is a is configuration type.
    /// </summary>
    /// <param name="type">The type.</param>
    /// <returns>
    ///   <c>true</c> if the given type is a configuration type; otherwise, <c>false</c>.
    /// </returns>
    private static bool IsConfigurationType(Type type)
    {
        if (type.Namespace != null && type.Namespace.StartsWith(ConfigurationNamespace))
        {
            return true;
        }

        if (type.BaseType != null && type.BaseType.Namespace != null && type.BaseType.Namespace.StartsWith(ConfigurationNamespace))
        {
            return true;
        }

        if (type.Name.Contains("Definition"))
        {
            return true;
        }

        if (type.Name =="AttributeRelationship" || type.Name =="PlugInConfiguration" || type.Name =="ConstValueAttribute")
        {
            return true;
        }

        return false;
    }

#>