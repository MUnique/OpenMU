// <copyright file="ItemDefinition.Generated.cs" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This source code was auto-generated by a roslyn code generator.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

namespace MUnique.OpenMU.Persistence.BasicModel;

using MUnique.OpenMU.Persistence.Json;

/// <summary>
/// A plain implementation of <see cref="ItemDefinition"/>.
/// </summary>
public partial class ItemDefinition : MUnique.OpenMU.DataModel.Configuration.Items.ItemDefinition, IIdentifiable, IConvertibleTo<ItemDefinition>
{
    
    /// <summary>
    /// Gets or sets the identifier of this instance.
    /// </summary>
    public Guid Id { get; set; }
    
    /// <summary>
    /// Gets the raw collection of <see cref="QualifiedCharacters" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("qualifiedCharacters")]
    [System.Text.Json.Serialization.JsonPropertyName("qualifiedCharacters")]
    public ICollection<CharacterClass> RawQualifiedCharacters { get; } = new List<CharacterClass>();
    
    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.CharacterClass> QualifiedCharacters
    {
        get => base.QualifiedCharacters ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.CharacterClass, CharacterClass>(this.RawQualifiedCharacters);
        protected set
        {
            this.QualifiedCharacters.Clear();
            foreach (var item in value)
            {
                this.QualifiedCharacters.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="PossibleItemSetGroups" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("possibleItemSetGroups")]
    [System.Text.Json.Serialization.JsonPropertyName("possibleItemSetGroups")]
    public ICollection<ItemSetGroup> RawPossibleItemSetGroups { get; } = new List<ItemSetGroup>();
    
    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemSetGroup> PossibleItemSetGroups
    {
        get => base.PossibleItemSetGroups ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemSetGroup, ItemSetGroup>(this.RawPossibleItemSetGroups);
        protected set
        {
            this.PossibleItemSetGroups.Clear();
            foreach (var item in value)
            {
                this.PossibleItemSetGroups.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="PossibleItemOptions" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("possibleItemOptions")]
    [System.Text.Json.Serialization.JsonPropertyName("possibleItemOptions")]
    public ICollection<ItemOptionDefinition> RawPossibleItemOptions { get; } = new List<ItemOptionDefinition>();
    
    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionDefinition> PossibleItemOptions
    {
        get => base.PossibleItemOptions ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemOptionDefinition, ItemOptionDefinition>(this.RawPossibleItemOptions);
        protected set
        {
            this.PossibleItemOptions.Clear();
            foreach (var item in value)
            {
                this.PossibleItemOptions.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="Requirements" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("requirements")]
    [System.Text.Json.Serialization.JsonPropertyName("requirements")]
    public ICollection<AttributeRequirement> RawRequirements { get; } = new List<AttributeRequirement>();
    
    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.AttributeRequirement> Requirements
    {
        get => base.Requirements ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.AttributeRequirement, AttributeRequirement>(this.RawRequirements);
        protected set
        {
            this.Requirements.Clear();
            foreach (var item in value)
            {
                this.Requirements.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="BasePowerUpAttributes" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("basePowerUpAttributes")]
    [System.Text.Json.Serialization.JsonPropertyName("basePowerUpAttributes")]
    public ICollection<ItemBasePowerUpDefinition> RawBasePowerUpAttributes { get; } = new List<ItemBasePowerUpDefinition>();
    
    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.Items.ItemBasePowerUpDefinition> BasePowerUpAttributes
    {
        get => base.BasePowerUpAttributes ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.Items.ItemBasePowerUpDefinition, ItemBasePowerUpDefinition>(this.RawBasePowerUpAttributes);
        protected set
        {
            this.BasePowerUpAttributes.Clear();
            foreach (var item in value)
            {
                this.BasePowerUpAttributes.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw collection of <see cref="DropItems" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dropItems")]
    [System.Text.Json.Serialization.JsonPropertyName("dropItems")]
    public ICollection<ItemDropItemGroup> RawDropItems { get; } = new List<ItemDropItemGroup>();
    
    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override ICollection<MUnique.OpenMU.DataModel.Configuration.ItemDropItemGroup> DropItems
    {
        get => base.DropItems ??= new CollectionAdapter<MUnique.OpenMU.DataModel.Configuration.ItemDropItemGroup, ItemDropItemGroup>(this.RawDropItems);
        protected set
        {
            this.DropItems.Clear();
            foreach (var item in value)
            {
                this.DropItems.Add(item);
            }
        }
    }

    /// <summary>
    /// Gets the raw object of <see cref="ItemSlot" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("itemSlot")]
    [System.Text.Json.Serialization.JsonPropertyName("itemSlot")]
    public ItemSlotType RawItemSlot
    {
        get => base.ItemSlot as ItemSlotType;
        set => base.ItemSlot = value;
    }

    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override MUnique.OpenMU.DataModel.Configuration.Items.ItemSlotType ItemSlot
    {
        get => base.ItemSlot;
        set => base.ItemSlot = value;
    }

    /// <summary>
    /// Gets the raw object of <see cref="ConsumeEffect" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("consumeEffect")]
    [System.Text.Json.Serialization.JsonPropertyName("consumeEffect")]
    public MagicEffectDefinition RawConsumeEffect
    {
        get => base.ConsumeEffect as MagicEffectDefinition;
        set => base.ConsumeEffect = value;
    }

    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override MUnique.OpenMU.DataModel.Configuration.MagicEffectDefinition ConsumeEffect
    {
        get => base.ConsumeEffect;
        set => base.ConsumeEffect = value;
    }

    /// <summary>
    /// Gets the raw object of <see cref="Skill" />.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("skill")]
    [System.Text.Json.Serialization.JsonPropertyName("skill")]
    public Skill RawSkill
    {
        get => base.Skill as Skill;
        set => base.Skill = value;
    }

    /// <inheritdoc/>
    [Newtonsoft.Json.JsonIgnore]
    [System.Text.Json.Serialization.JsonIgnore]
    public override MUnique.OpenMU.DataModel.Configuration.Skill Skill
    {
        get => base.Skill;
        set => base.Skill = value;
    }


    /// <inheritdoc/>
    public override bool Equals(object obj)
    {
        var baseObject = obj as IIdentifiable;
        if (baseObject != null)
        {
            return baseObject.Id == this.Id;
        }

        return base.Equals(obj);
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return this.Id.GetHashCode();
    }

    /// <inheritdoc/>
    public ItemDefinition Convert() => this;
}
